// Code generated by MockGen. DO NOT EDIT.
// Source: /home/anton/tbank-tech/scrapper/internal/repository/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/Ranik23/tbank-tech/scrapper/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateLink mocks base method.
func (m *MockRepository) CreateLink(ctx context.Context, link string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLink", ctx, link)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLink indicates an expected call of CreateLink.
func (mr *MockRepositoryMockRecorder) CreateLink(ctx, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLink", reflect.TypeOf((*MockRepository)(nil).CreateLink), ctx, link)
}

// CreateLinkUser mocks base method.
func (m *MockRepository) CreateLinkUser(ctx context.Context, linkID, userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLinkUser", ctx, linkID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLinkUser indicates an expected call of CreateLinkUser.
func (mr *MockRepositoryMockRecorder) CreateLinkUser(ctx, linkID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLinkUser", reflect.TypeOf((*MockRepository)(nil).CreateLinkUser), ctx, linkID, userID)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(ctx context.Context, userID uint, name, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, userID, name, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(ctx, userID, name, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), ctx, userID, name, token)
}

// DeleteLink mocks base method.
func (m *MockRepository) DeleteLink(ctx context.Context, linkID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLink", ctx, linkID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLink indicates an expected call of DeleteLink.
func (mr *MockRepositoryMockRecorder) DeleteLink(ctx, linkID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLink", reflect.TypeOf((*MockRepository)(nil).DeleteLink), ctx, linkID)
}

// DeleteLinkUser mocks base method.
func (m *MockRepository) DeleteLinkUser(ctx context.Context, linkID, userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLinkUser", ctx, linkID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLinkUser indicates an expected call of DeleteLinkUser.
func (mr *MockRepositoryMockRecorder) DeleteLinkUser(ctx, linkID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLinkUser", reflect.TypeOf((*MockRepository)(nil).DeleteLinkUser), ctx, linkID, userID)
}

// DeleteUser mocks base method.
func (m *MockRepository) DeleteUser(ctx context.Context, userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockRepositoryMockRecorder) DeleteUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockRepository)(nil).DeleteUser), ctx, userID)
}

// GetLinkByURL mocks base method.
func (m *MockRepository) GetLinkByURL(ctx context.Context, url string) (*models.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkByURL", ctx, url)
	ret0, _ := ret[0].(*models.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkByURL indicates an expected call of GetLinkByURL.
func (mr *MockRepositoryMockRecorder) GetLinkByURL(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkByURL", reflect.TypeOf((*MockRepository)(nil).GetLinkByURL), ctx, url)
}

// GetLinkUser mocks base method.
func (m *MockRepository) GetLinkUser(ctx context.Context, userID, linkID uint) (*models.LinkUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkUser", ctx, userID, linkID)
	ret0, _ := ret[0].(*models.LinkUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkUser indicates an expected call of GetLinkUser.
func (mr *MockRepositoryMockRecorder) GetLinkUser(ctx, userID, linkID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkUser", reflect.TypeOf((*MockRepository)(nil).GetLinkUser), ctx, userID, linkID)
}

// GetLinks mocks base method.
func (m *MockRepository) GetLinks(ctx context.Context, userID uint) ([]models.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinks", ctx, userID)
	ret0, _ := ret[0].([]models.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinks indicates an expected call of GetLinks.
func (mr *MockRepositoryMockRecorder) GetLinks(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinks", reflect.TypeOf((*MockRepository)(nil).GetLinks), ctx, userID)
}

// GetUserByID mocks base method.
func (m *MockRepository) GetUserByID(ctx context.Context, userID uint) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockRepositoryMockRecorder) GetUserByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockRepository)(nil).GetUserByID), ctx, userID)
}

// GetUserByName mocks base method.
func (m *MockRepository) GetUserByName(ctx context.Context, name string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", ctx, name)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockRepositoryMockRecorder) GetUserByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockRepository)(nil).GetUserByName), ctx, name)
}

// GetUsers mocks base method.
func (m *MockRepository) GetUsers(ctx context.Context) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockRepositoryMockRecorder) GetUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockRepository)(nil).GetUsers), ctx)
}
