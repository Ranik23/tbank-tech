// Code generated by MockGen. DO NOT EDIT.
// Source: /home/anton/tbank-tech/scrapper/pkg/github_client/github_client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v69/github"
)

// MockGitHubClient is a mock of GitHubClient interface.
type MockGitHubClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubClientMockRecorder
}

// MockGitHubClientMockRecorder is the mock recorder for MockGitHubClient.
type MockGitHubClientMockRecorder struct {
	mock *MockGitHubClient
}

// NewMockGitHubClient creates a new mock instance.
func NewMockGitHubClient(ctrl *gomock.Controller) *MockGitHubClient {
	mock := &MockGitHubClient{ctrl: ctrl}
	mock.recorder = &MockGitHubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHubClient) EXPECT() *MockGitHubClientMockRecorder {
	return m.recorder
}

// LatestCommit mocks base method.
func (m *MockGitHubClient) LatestCommit(ctx context.Context, owner, repo, token string, opts *github.CommitsListOptions) (*github.RepositoryCommit, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestCommit", ctx, owner, repo, token, opts)
	ret0, _ := ret[0].(*github.RepositoryCommit)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LatestCommit indicates an expected call of LatestCommit.
func (mr *MockGitHubClientMockRecorder) LatestCommit(ctx, owner, repo, token, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestCommit", reflect.TypeOf((*MockGitHubClient)(nil).LatestCommit), ctx, owner, repo, token, opts)
}

// ListCommits mocks base method.
func (m *MockGitHubClient) ListCommits(ctx context.Context, owner, repo, token string, opts *github.CommitsListOptions) ([]*github.RepositoryCommit, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommits", ctx, owner, repo, token, opts)
	ret0, _ := ret[0].([]*github.RepositoryCommit)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCommits indicates an expected call of ListCommits.
func (mr *MockGitHubClientMockRecorder) ListCommits(ctx, owner, repo, token, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommits", reflect.TypeOf((*MockGitHubClient)(nil).ListCommits), ctx, owner, repo, token, opts)
}
