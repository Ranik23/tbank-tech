// Code generated by MockGen. DO NOT EDIT.
// Source: /home/anton/go/pkg/mod/github.com/!i!b!m/sarama@v1.45.1/consumer.go

// Package kafkaconsumer is a generated GoMock package.
package kafkaconsumer

import (
	reflect "reflect"

	sarama "github.com/IBM/sarama"
	gomock "github.com/golang/mock/gomock"
)

// MockConsumer is a mock of Consumer interface.
type MockConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerMockRecorder
}

// MockConsumerMockRecorder is the mock recorder for MockConsumer.
type MockConsumerMockRecorder struct {
	mock *MockConsumer
}

// NewMockConsumer creates a new mock instance.
func NewMockConsumer(ctrl *gomock.Controller) *MockConsumer {
	mock := &MockConsumer{ctrl: ctrl}
	mock.recorder = &MockConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumer) EXPECT() *MockConsumerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConsumer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConsumerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConsumer)(nil).Close))
}

// ConsumePartition mocks base method.
func (m *MockConsumer) ConsumePartition(topic string, partition int32, offset int64) (sarama.PartitionConsumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumePartition", topic, partition, offset)
	ret0, _ := ret[0].(sarama.PartitionConsumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsumePartition indicates an expected call of ConsumePartition.
func (mr *MockConsumerMockRecorder) ConsumePartition(topic, partition, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumePartition", reflect.TypeOf((*MockConsumer)(nil).ConsumePartition), topic, partition, offset)
}

// HighWaterMarks mocks base method.
func (m *MockConsumer) HighWaterMarks() map[string]map[int32]int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HighWaterMarks")
	ret0, _ := ret[0].(map[string]map[int32]int64)
	return ret0
}

// HighWaterMarks indicates an expected call of HighWaterMarks.
func (mr *MockConsumerMockRecorder) HighWaterMarks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HighWaterMarks", reflect.TypeOf((*MockConsumer)(nil).HighWaterMarks))
}

// Partitions mocks base method.
func (m *MockConsumer) Partitions(topic string) ([]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Partitions", topic)
	ret0, _ := ret[0].([]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Partitions indicates an expected call of Partitions.
func (mr *MockConsumerMockRecorder) Partitions(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Partitions", reflect.TypeOf((*MockConsumer)(nil).Partitions), topic)
}

// Pause mocks base method.
func (m *MockConsumer) Pause(topicPartitions map[string][]int32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Pause", topicPartitions)
}

// Pause indicates an expected call of Pause.
func (mr *MockConsumerMockRecorder) Pause(topicPartitions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockConsumer)(nil).Pause), topicPartitions)
}

// PauseAll mocks base method.
func (m *MockConsumer) PauseAll() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PauseAll")
}

// PauseAll indicates an expected call of PauseAll.
func (mr *MockConsumerMockRecorder) PauseAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseAll", reflect.TypeOf((*MockConsumer)(nil).PauseAll))
}

// Resume mocks base method.
func (m *MockConsumer) Resume(topicPartitions map[string][]int32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Resume", topicPartitions)
}

// Resume indicates an expected call of Resume.
func (mr *MockConsumerMockRecorder) Resume(topicPartitions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resume", reflect.TypeOf((*MockConsumer)(nil).Resume), topicPartitions)
}

// ResumeAll mocks base method.
func (m *MockConsumer) ResumeAll() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResumeAll")
}

// ResumeAll indicates an expected call of ResumeAll.
func (mr *MockConsumerMockRecorder) ResumeAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeAll", reflect.TypeOf((*MockConsumer)(nil).ResumeAll))
}

// Topics mocks base method.
func (m *MockConsumer) Topics() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topics")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Topics indicates an expected call of Topics.
func (mr *MockConsumerMockRecorder) Topics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topics", reflect.TypeOf((*MockConsumer)(nil).Topics))
}

// MockPartitionConsumer is a mock of PartitionConsumer interface.
type MockPartitionConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockPartitionConsumerMockRecorder
}

// MockPartitionConsumerMockRecorder is the mock recorder for MockPartitionConsumer.
type MockPartitionConsumerMockRecorder struct {
	mock *MockPartitionConsumer
}

// NewMockPartitionConsumer creates a new mock instance.
func NewMockPartitionConsumer(ctrl *gomock.Controller) *MockPartitionConsumer {
	mock := &MockPartitionConsumer{ctrl: ctrl}
	mock.recorder = &MockPartitionConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartitionConsumer) EXPECT() *MockPartitionConsumerMockRecorder {
	return m.recorder
}

// AsyncClose mocks base method.
func (m *MockPartitionConsumer) AsyncClose() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AsyncClose")
}

// AsyncClose indicates an expected call of AsyncClose.
func (mr *MockPartitionConsumerMockRecorder) AsyncClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncClose", reflect.TypeOf((*MockPartitionConsumer)(nil).AsyncClose))
}

// Close mocks base method.
func (m *MockPartitionConsumer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPartitionConsumerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPartitionConsumer)(nil).Close))
}

// Errors mocks base method.
func (m *MockPartitionConsumer) Errors() <-chan *sarama.ConsumerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Errors")
	ret0, _ := ret[0].(<-chan *sarama.ConsumerError)
	return ret0
}

// Errors indicates an expected call of Errors.
func (mr *MockPartitionConsumerMockRecorder) Errors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errors", reflect.TypeOf((*MockPartitionConsumer)(nil).Errors))
}

// HighWaterMarkOffset mocks base method.
func (m *MockPartitionConsumer) HighWaterMarkOffset() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HighWaterMarkOffset")
	ret0, _ := ret[0].(int64)
	return ret0
}

// HighWaterMarkOffset indicates an expected call of HighWaterMarkOffset.
func (mr *MockPartitionConsumerMockRecorder) HighWaterMarkOffset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HighWaterMarkOffset", reflect.TypeOf((*MockPartitionConsumer)(nil).HighWaterMarkOffset))
}

// IsPaused mocks base method.
func (m *MockPartitionConsumer) IsPaused() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPaused")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPaused indicates an expected call of IsPaused.
func (mr *MockPartitionConsumerMockRecorder) IsPaused() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPaused", reflect.TypeOf((*MockPartitionConsumer)(nil).IsPaused))
}

// Messages mocks base method.
func (m *MockPartitionConsumer) Messages() <-chan *sarama.ConsumerMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Messages")
	ret0, _ := ret[0].(<-chan *sarama.ConsumerMessage)
	return ret0
}

// Messages indicates an expected call of Messages.
func (mr *MockPartitionConsumerMockRecorder) Messages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Messages", reflect.TypeOf((*MockPartitionConsumer)(nil).Messages))
}

// Pause mocks base method.
func (m *MockPartitionConsumer) Pause() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Pause")
}

// Pause indicates an expected call of Pause.
func (mr *MockPartitionConsumerMockRecorder) Pause() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockPartitionConsumer)(nil).Pause))
}

// Resume mocks base method.
func (m *MockPartitionConsumer) Resume() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Resume")
}

// Resume indicates an expected call of Resume.
func (mr *MockPartitionConsumerMockRecorder) Resume() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resume", reflect.TypeOf((*MockPartitionConsumer)(nil).Resume))
}
