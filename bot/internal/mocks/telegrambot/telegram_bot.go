// Code generated by MockGen. DO NOT EDIT.
// Source: /home/anton/tbank-tech/bot/internal/telegram-producer/telegram-producer.go

// Package telegrambot is a generated GoMock package.
package telegrambot

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	telebot "gopkg.in/telebot.v3"
)

// MockTelegramBot is a mock of TelegramBot interface.
type MockTelegramBot struct {
	ctrl     *gomock.Controller
	recorder *MockTelegramBotMockRecorder
}

// MockTelegramBotMockRecorder is the mock recorder for MockTelegramBot.
type MockTelegramBotMockRecorder struct {
	mock *MockTelegramBot
}

// NewMockTelegramBot creates a new mock instance.
func NewMockTelegramBot(ctrl *gomock.Controller) *MockTelegramBot {
	mock := &MockTelegramBot{ctrl: ctrl}
	mock.recorder = &MockTelegramBotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelegramBot) EXPECT() *MockTelegramBotMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockTelegramBot) Send(to telebot.Recipient, what interface{}, opts ...interface{}) (*telebot.Message, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{to, what}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Send", varargs...)
	ret0, _ := ret[0].(*telebot.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockTelegramBotMockRecorder) Send(to, what interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{to, what}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTelegramBot)(nil).Send), varargs...)
}
